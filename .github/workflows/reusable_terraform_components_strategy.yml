---
name: terraform strategy

on:
  workflow_call:
    inputs:
      application:
        type: string
        required: true
        description: "Application name for which this strategy matrix pipeline should run."
    outputs:
      matrix:
        description: "Matrix JSON string to feed that can be used as strategy in a separate terraform job"
        value: ${{ jobs.strategy.outputs.matrix }}

jobs:
  strategy:
    name: "strategy"
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
    steps:
      - name: Check out Repo
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b

      - name: Generate Strategy Matrix
        id: strategy
        run: |
          set -euo pipefail

          # Fetch the main branch for comparison.
          git fetch origin main

          # Determine the commit to use as the tip of the branch.
          # For pull request events, use the PR's head commit.
          if [[ "${GITHUB_REF}" == refs/pull/* ]]; then
            head_commit=$(jq --raw-output .pull_request.head.sha "$GITHUB_EVENT_PATH")
          else
            head_commit=HEAD
          fi

          # Fetch environment data from <application>.json.
          if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
            # On a branch: production gets "plan", others get "plan_apply".
            curl -s -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
              | jq -c '.environments[] as $env |
                  if $env.name | contains("production") then
                    {"target": $env.name, "action": "plan"}
                  else
                    {"target": $env.name, "action": "plan_apply"}
                  end' > envlist.json
          else
            # On main: all accounts get "plan_apply".
            curl -s -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
              | jq -c '.environments[] | {"target": .name, "action": "plan_apply"}' > envlist.json
          fi

          # Discover valid subfolders that contain a platform_backend.tf file.
          # Always include the application folder itself as "root".
          COMPONENTS="root"
          app_dir="terraform/environments/${{ inputs.application }}"
          if [ -d "$app_dir" ]; then
            for d in $(find "$app_dir" -mindepth 1 -maxdepth 1 -type d); do
              subfolder=$(basename "$d")
              if [ -f "$d/platform_backend.tf" ] && [ "$subfolder" != ".terraform" ]; then
                COMPONENTS="$COMPONENTS $subfolder"
              fi
            done
          fi

          echo "Discovered components (folders with platform_backend.tf): $COMPONENTS"

          # Build the final matrix by checking each component independently.
          echo "[" > final-list.json
          firstEntry=true

          while IFS= read -r envobj; do
            for comp in $COMPONENTS; do
              if [ "$comp" = "root" ]; then
                folder="$app_dir"
              else
                folder="$app_dir/$comp"
              fi

              # Check for changes in the folder.
              if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
                merge_base=$(git merge-base origin/main "$head_commit")
                if git diff --quiet "$merge_base" "$head_commit" -- "$folder"; then
                  echo "No changes in '$folder' (branch compared to merge base); skipping '$comp'"
                  continue
                fi
              else
                if git diff --quiet HEAD~1 HEAD -- "$folder"; then
                  echo "No changes in '$folder' (main branch); skipping '$comp'"
                  continue
                fi
              fi

              # Add an entry for this component.
              if [ "$firstEntry" = true ]; then
                firstEntry=false
              else
                echo "," >> final-list.json
              fi
              echo -n "$envobj" | jq --arg comp "$comp" '. + {"component": $comp}' >> final-list.json
            done
          done < envlist.json

          echo "]" >> final-list.json

          # Wrap the JSON array in a matrix object.
          echo -n '{"include":' > matrix.out
          cat final-list.json >> matrix.out
          echo '}' >> matrix.out

          matrix=$(cat matrix.out | jq -r)
          echo "Matrix is:"
          echo "$matrix"

          # Pass the matrix to subsequent jobs.
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
