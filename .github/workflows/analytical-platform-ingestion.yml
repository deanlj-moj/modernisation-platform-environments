---
  name: analytical-platform-ingestion

  on:
    push:
      branches:
        - main
      paths:
        - 'terraform/environments/analytical-platform-ingestion/**'
        - '.github/workflows/analytical-platform-ingestion.yml'

    pull_request:
      branches:
        - main
      paths:
        - 'terraform/environments/analytical-platform-ingestion/**'
        - '.github/workflows/analytical-platform-ingestion.yml'

    workflow_dispatch:
      inputs:
        action:
          description: 'Choose an action'
          default: 'deploy'
          required: true
          type: choice
          options:
            - deploy
            - destroy

  permissions:
    id-token: write
    contents: read

  jobs:
    strategy:
      name: "Strategy: Generate Matrix"
      if: ${{ inputs.action != 'destroy' }}
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.build_matrix.outputs.matrix }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Build Environment and Component Matrix
          id: build_matrix
          run: |
            set -euo pipefail

            # 1. Fetch environment data
            if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
              # On a branch: plan on production, plan_apply on others
              curl -sS -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/analytical-platform-ingestion.json" \
                | jq -c '.environments[] as $env |
                    if $env.name | contains("production") then
                      {"target": $env.name, "action": "plan"}
                    else
                      {"target": $env.name, "action": "plan_apply"}
                    end' > envlist.json
            else
              # On main: plan_apply on all
              curl -sS -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/analytical-platform-ingestion.json" \
                | jq -c '.environments[] | {"target": .name, "action": "plan_apply"}' > envlist.json
            fi

            # 2. Discover components (subdirectories with platform_backend.tf)
            COMPONENTS="NONE"  # 'NONE' represents the root directory
            if [ -d "terraform/environments/analytical-platform-ingestion" ]; then
              while IFS= read -r -d $'\0' dir; do
                subfolder="$(basename "$dir" | tr -d '\r\n')"
                if [ -f "$dir/platform_backend.tf" ]; then
                  [ "$subfolder" = ".terraform" ] && continue
                  COMPONENTS="$COMPONENTS $subfolder"
                fi
              done < <(find terraform/environments/analytical-platform-ingestion -mindepth 1 -maxdepth 1 -type d -print0)
            fi

            echo "Discovered components: $COMPONENTS"

            # 3. Create matrix
            echo "[" > final_matrix.json
            first_entry=true
            while IFS= read -r env; do
              for comp in $COMPONENTS; do
                if [ "$first_entry" = true ]; then
                  first_entry=false
                else
                  echo "," >> final_matrix.json
                fi
                echo -n "$env" | jq --arg comp "$comp" '. + { "component": $comp }' >> final_matrix.json
              done
            done < envlist.json
            echo "]" >> final_matrix.json

            # 4. Wrap matrix in include
            echo '{"include":' > matrix.json
            cat final_matrix.json >> matrix.json
            echo '}' >> matrix.json

            echo "Final Matrix:"
            cat matrix.json | jq

            # 5. Output matrix
            echo "matrix<<EOF" >> $GITHUB_OUTPUT
            cat matrix.json >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

    terraform:
      name: "Terraform Plan and Apply"
      needs: strategy
      if: ${{ inputs.action != 'destroy' }}
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix: ${{ fromJson(needs.strategy.outputs.matrix) }}
      env:
        ENV_MANAGEMENT: ${{ secrets.MODERNISATION_PLATFORM_ENVIRONMENTS }}
        GITHUB_TOKEN: ${{ secrets.pipeline_github_token }}
      steps:
        - name: Debug Matrix Values
          run: |
            echo "Application: analytical-platform-ingestion"
            echo "Target Environment: ${{ matrix.target }}"
            echo "Action: ${{ matrix.action }}"
            echo "Component: ${{ matrix.component }}"

        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Retrieve AWS Account Numbers
          run: |
            APP="analytical-platform-ingestion"
            ENV="${{ matrix.target }}"
            ACCOUNT_NAME="${APP}-${ENV}"
            ACCOUNT_NUMBER=$(jq -r --arg acc "$ACCOUNT_NAME" '.account_ids[$acc]' <<< "$ENV_MANAGEMENT")
            echo "::add-mask::$ACCOUNT_NUMBER"
            echo "ACCOUNT_NUMBER=${ACCOUNT_NUMBER}" >> $GITHUB_ENV

            BACKEND_NUMBER=$(jq -r '.modernisation_platform_account_id' <<< "$ENV_MANAGEMENT")
            echo "::add-mask::$BACKEND_NUMBER"
            echo "BACKEND_NUMBER=${BACKEND_NUMBER}" >> $GITHUB_ENV

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions"
            role-session-name: githubactionsrolesession
            aws-region: "eu-west-2"

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "~1"

        #
        # Terraform Init
        #
        - name: Terraform Init
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          run: |
            terraform --version
            echo "terraform init -backend-config=assume_role={role_arn=\"arn:aws:iam::${{env.BACKEND_NUMBER}}:role/modernisation-account-terraform-state-member-access\"}"
            terraform init -backend-config=assume_role={role_arn=\"arn:aws:iam::${{env.BACKEND_NUMBER}}:role/modernisation-account-terraform-state-member-access\"}

        #
        # Terraform Workspace Select
        #
        - name: Terraform Workspace Select
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          run: |
            WORKSPACE="analytical-platform-ingestion-${{ matrix.target }}"
            terraform workspace select "$WORKSPACE" || terraform workspace new "$WORKSPACE"

        #
        # Optional State Refresh
        #
        - name: Terraform State Refresh (Optional)
          if: ${{ inputs.do_state_refresh_on_plan }}
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          run: |
            set -o pipefail
            tf_args="${{ inputs.plan_apply_tfargs }}"
            echo "terraform apply -refresh-only -auto-approve ${tf_args}"
            terraform apply -refresh-only -auto-approve ${tf_args} | bash ${GITHUB_WORKSPACE}/scripts/redact-output.sh

        #
        # Terraform Plan
        #
        - name: Terraform Plan
          id: plan
          env:
            POST_PLAN_TO_PR: "${{ github.event_name == 'pull_request' && inputs.post_plan_to_pr }}"
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          run: |
            set -o pipefail
            exitcode=0
            tf_args="-detailed-exitcode ${{ inputs.plan_apply_tfargs }}"
            [[ "${POST_PLAN_TO_PR}" == 'true' ]] && tf_args="${tf_args} -no-color"
            [[ "${{ inputs.do_state_refresh_on_plan }}" == 'true' ]] && tf_args="${tf_args} -refresh=false"
            echo "terraform plan ${tf_args} -out=tfplan"
            terraform plan ${tf_args} -out=tfplan | bash ${GITHUB_WORKSPACE}/scripts/redact-output.sh | tee tfplan.txt || exitcode=$?
            terraform show -json tfplan > tfplan.json
            echo "exitcode=${exitcode}"
            echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
            (( exitcode == 1 )) && exit 1 || exit 0

        - name: Evaluate Terraform Plan
          if: ${{ github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2' }}
          id: evaluate_terraform_plan
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          shell: bash
          run: |
            bash ${GITHUB_WORKSPACE}/scripts/terraform-plan-evaluator.sh tfplan.json

        - name: Create Plan PR Message (Optional)
          if: ${{ github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2' && inputs.post_plan_to_pr }}
          working-directory: "${{ matrix.component != 'NONE' && format('terraform/environments/analytical-platform-ingestion/{0}', matrix.component) || 'terraform/environments/analytical-platform-ingestion' }}"
          run: |
            comment() {
              url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              len=$(wc -c < tfplan.txt)
              echo '**`${{ env.WORKSPACE_NAME }}`** terraform plan on `${{ github.event_name }}` event [#${{ github.run_number }}]('${url}')'
              echo
              echo '```'
              sed -n '/Terraform will perform/,$p' tfplan.txt | head -c 65476
              echo
              echo '```'
              if [[ "$len" -gt 65476 ]]; then
                echo "** Truncated output. See $url for the rest **"
              fi
            }
            echo 'TF_PLAN_OUT<<EOF' >> $GITHUB_ENV
            comment >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV

        - name: Hide Previous PR Comment (Optional)
          if: ${{ github.event_name == 'pull_request' }}
          working-directory: "scripts/minimise-comments"
          env:
            COMMENT_BODY_CONTAINS: "**`${{ env.WORKSPACE_NAME }}`**"
            PR_NUMBER: "${{ github.event.pull_request.number }}"
          run: |
            go build
            ./minimise-comments

        - name: Post Plan to PR (Optional)
          if: ${{ github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2' && inputs.post_plan_to_pr }}
          env:
            message: "${{ env.TF_PLAN_OUT }}"
          run: |
            escaped_message=$(echo "$message" | jq -Rsa .)
            curl -sS -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
              -d '{"body":'"${escaped_message}"'}'

        - name: Check for Approval
          id: check_approval
          if: ${{ github.event_name == 'pull_request' && steps.evaluate_terraform_plan.outputs.resources_found == 'true' }}
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.pipeline_github_token }}
            script: |
              const orgName = 'ministryofjustice';
              const teamSlug = 'modernisation-platform';

              const {data: reviews} = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });

              const {data: team_members} = await github.rest.teams.listMembersInOrg({
                org: orgName,
                team_slug: teamSlug
              });

              const teamMemberLogins = team_members.map(member => member.login);
              const approved = reviews.some(review => review.state === 'APPROVED' && teamMemberLogins.includes(review.user.login));

              if (approved) {
                core.notice('Pull request approved by a member of @ministryofjustice/modernisation-platform');
              } else {
                core.setFailed('Terraform plan evaluation detected changes to resources that require approval from a member of @ministryofjustice/modernisation-platform - please contact #ask-modernisation-platform for assistance');

                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  event: 'REQUEST_CHANGES',
                  body: 'Terraform plan evaluation detected changes to resources that require approval from @ministryofjustice/modernisation-platform - please contact #ask-modernisation-platform for assistance'
                });
              }

        - name: Comment if PR Requires Approval
          id: comment_if_not_approved
          if: ${{ failure() && github.event_name == 'pull_request' && steps.check_approval.outcome == 'failure' }}
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.pipeline_github_token }}
            script: |
              const owner = context.repo.owner;
              const repo = context.repo.repo;

              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: context.payload.pull_request.number,
                body: `@${context.actor} Terraform plan evaluation detected changes to resources that require approval from a member of @ministryofjustice/modernisation-platform - please contact #ask-modernisation-platform for assistance\n
                Guidance on approving these PRs is available at https://user-guide.modernisation-platform.service.justice.gov.uk/runbooks/reviewing-mp-environments-prs.html#process-for-approving-prs`
              });

    apply:
      name: "Terraform Apply"
      needs: terraform
      if: ${{ inputs.action == 'plan_apply' && needs.plan.outputs.plan_exitcode == '2' }}
      runs-on: ubuntu-latest
      environment: "${{ inputs.application }}-${{ inputs.environment }}"
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Get AWS Account Number
          run: |
            ACCOUNT_NUMBER=$(jq -r -e --arg account_name "${ACCOUNT_NAME}" '.account_ids[$account_name]' <<< "$ENVIRONMENT_MANAGEMENT")
            echo "::add-mask::$ACCOUNT_NUMBER"
            echo "ACCOUNT_NUMBER=${ACCOUNT_NUMBER}" >> $GITHUB_ENV

        - name: Get Backend AWS Account Number
          run: |
            BACKEND_NUMBER=$(jq -r -e '.modernisation_platform_account_id' <<< "$ENVIRONMENT_MANAGEMENT")
            echo "::add-mask::$BACKEND_NUMBER"
            echo "BACKEND_NUMBER=${BACKEND_NUMBER}" >> $GITHUB_ENV

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions"
            role-session-name: githubactionsrolesession
            aws-region: "eu-west-2"

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "~1"

        #
        # Terraform Init
        #
        - name: Terraform Init
          working-directory: "${{ inputs.component != 'NONE' && format('terraform/environments/{0}/{1}', inputs.application, inputs.component) || format('terraform/environments/{0}', inputs.application) }}"
          run: |
            terraform --version
            echo "terraform init -backend-config=assume_role={role_arn=\"arn:aws:iam::${{env.BACKEND_NUMBER}}:role/modernisation-account-terraform-state-member-access\"}"
            terraform init -backend-config=assume_role={role_arn=\"arn:aws:iam::${{env.BACKEND_NUMBER}}:role/modernisation-account-terraform-state-member-access\"}

        #
        # Terraform Workspace Select
        #
        - name: Terraform Workspace Select
          working-directory: "${{ inputs.component != 'NONE' && format('terraform/environments/{0}/{1}', inputs.application, inputs.component) || format('terraform/environments/{0}', inputs.application) }}"
          run: |
            terraform workspace select "${WORKSPACE_NAME}" || terraform workspace new "${WORKSPACE_NAME}"

        #
        # Terraform Plan
        #
        - name: Terraform Plan
          working-directory: "${{ inputs.component != 'NONE' && format('terraform/environments/{0}/{1}', inputs.application, inputs.component) || format('terraform/environments/{0}', inputs.application) }}"
          run: |
            set -o pipefail
            tf_args="-out x.tfplan ${{ inputs.plan_apply_tfargs }}"
            echo "terraform plan ${tf_args}"
            terraform plan ${tf_args} | bash ${GITHUB_WORKSPACE}/scripts/redact-output.sh

        #
        # Terraform Apply
        #
        - name: Terraform Apply
          working-directory: "${{ inputs.component != 'NONE' && format('terraform/environments/{0}/{1}', inputs.application, inputs.component) || format('terraform/environments/{0}', inputs.application) }}"
          run: |
            set -o pipefail
            tf_args="${{ inputs.plan_apply_tfargs }} x.tfplan"
            echo "terraform apply ${tf_args}"
            terraform apply ${tf_args} | bash ${GITHUB_WORKSPACE}/scripts/redact-output.sh
